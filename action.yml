# On updates to main branch, read the VERSION file in this repo. If that file has changed, create a new release and version tags.

# Versions are expected in SemVer format, `MAJOR.MINOR.PATCH`
# The HEAD commit is tagged with `v{MAJOR}`, `v{MAJOR}.{MINOR}`, and `v{MAJOR}.{MINOR}.{PATCH}` (the latter through a GH release).
# Tags are force-pushed, replacing any existing with the same name.

# In practice, a downstream workflow will target this repo in a few ways:
# - `v{MAJOR}`: the workflow accepts all MINOR and PATCH updates automatically. No Dependabot PRs are generated unless the MAJOR version is changed.
# - `v{MAJOR}.{MINOR}`: the workflow accepts all PATCH updates automatically. No Dependabot PRs are generated if only the PATCH version is changed.
# - `v{MAJOR}.{MINOR}.{PATCH}`: the workflow accepts no updates automatically. Dependabot will generate update PRs for all changes.
# We can also simply use the `main` branch (take all updates, make no Dependabot PRs) or a commit SHA (take no updates, potentially make Dependabot PRs for all changes).
# Unless there are specific reasons to do otherwise, most workflows should target the `v{MAJOR}` tag.

name: "GitHub Actions CD"
description: "Handles continuous delivery and automated releases for a GitHub Actions action repo."
author: "Galen Rice"
inputs:
  token:
    description: "The token that the action will use to create releases."
    default: ${{ github.token }}
  version_file:
    description: |
      Path to a file where the current version is tracked.
      The file should contain a semver-compliant version.
      Changes to this file trigger the workflow to create releases and tags.
    default: "VERSION"

runs:
  using: "composite"
  steps:
    - name: Detect changed version file
      id: changed-files-version
      uses: tj-actions/changed-files@v46
      with:
        files: |
          ${{ inputs.version_file }}

    - name: Get version
      if: ${{ steps.changed-files-version.outputs.any_changed == 'true' }}
      id: get_version
      run: echo "version=$(cat ${{ inputs.version_file }})" >> $GITHUB_OUTPUT
      shell: bash

    # Creates our PATCH (vX.Y.Z) tag
    # Output from this is fed to the release action later
    - name: Tag release
      if: ${{ steps.changed-files-version.outputs.any_changed == 'true' }}
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.2
      with:
        github_token: ${{ inputs.token }}
        custom_tag: ${{ steps.get_version.outputs.version }}

    # Creates or updates our MAJOR (vX) and MINOR (vX.Y) tags
    - name: Create or update matching MAJOR, MINOR, and PATCH tags
      if: ${{ steps.changed-files-version.outputs.any_changed == 'true' }}
      run: |
        version="${{ steps.get_version.outputs.version }}"
        a=(${version//./ })
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git config user.name "GitHub Action"

        # MAJOR tag (vX)
        git tag -fa v${a[0]} -m "Update v${a[0]} tag"
        git push origin v${a[0]} --force

        # MINOR version tag (vX.Y)
        git tag -fa v${a[0]}.${a[1]} -m "Update v${a[0]}.${a[1]} tag"
        git push origin v${a[0]}.${a[1]} --force
      shell: bash

    - name: Create new GitHub release
      if: ${{ steps.changed-files-version.outputs.any_changed == 'true' }}
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.tag_version.outputs.new_tag }}
        name: Release ${{ steps.tag_version.outputs.new_tag }}
        body: ${{ steps.tag_version.outputs.changelog }}
        generateReleaseNotes: true

branding:
  icon: "fast-forward"
  color: "orange"
